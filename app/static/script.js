document.addEventListener('DOMContentLoaded', function() {
    const modal = document.getElementById('userModal');
    const modalUserId = document.getElementById('modalUserId');
    const saveUserIdBtn = document.getElementById('saveUserId');
    const changeUserIdBtn = document.getElementById('changeUserId');
    const currentUserIdSpan = document.getElementById('currentUserId');
    const form = document.getElementById('askForm');
    const hiddenUserId = document.getElementById('user_id');
    const submitButton = document.getElementById('submitButton');
    const responseSection = document.getElementById('responseSection');
    const responseContent = document.getElementById('responseContent');
    const queryExamples = document.querySelectorAll('.query-example');

    // Check if user ID is already saved
    function getSavedUserId() {
        return localStorage.getItem('rag_sql_user_id');
    }

    function setSavedUserId(userId) {
        localStorage.setItem('rag_sql_user_id', userId);
    }

    function updateUI() {
        const savedUserId = getSavedUserId();
        if (savedUserId) {
            currentUserIdSpan.textContent = savedUserId;
            hiddenUserId.value = savedUserId;
            submitButton.disabled = false;
            submitButton.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å';
            modal.style.display = 'none';
        } else {
            currentUserIdSpan.textContent = '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
            hiddenUserId.value = '';
            submitButton.disabled = true;
            submitButton.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å (—Ç—Ä–µ–±—É–µ—Ç—Å—è User ID)';
            modal.style.display = 'block';
        }
    }

    // Show modal for changing user ID
    function showUserModal() {
        modal.style.display = 'block';
        modalUserId.value = getSavedUserId() || '';
        modalUserId.focus();
    }

    // Save user ID from modal
    saveUserIdBtn.addEventListener('click', function() {
        const userId = modalUserId.value.trim();
        if (!userId) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ User ID');
            return;
        }
        
        setSavedUserId(userId);
        updateUI();
        
        // Show success message
        const successMsg = document.createElement('div');
        successMsg.className = 'success';
        successMsg.textContent = `User ID ${userId} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏.`;
        document.querySelector('.test-form').insertBefore(successMsg, form);
        
        setTimeout(() => {
            successMsg.remove();
        }, 3000);
    });

    // Change user ID button
    changeUserIdBtn.addEventListener('click', showUserModal);

    // Allow Enter key in modal input
    modalUserId.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            saveUserIdBtn.click();
        }
    });

    // Query example buttons
    queryExamples.forEach(button => {
        button.addEventListener('click', function() {
            document.getElementById('question').value = this.getAttribute('data-query');
        });
    });

    // Form submission
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const savedUserId = getSavedUserId();
        if (!savedUserId) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ User ID');
            showUserModal();
            return;
        }

        const originalText = submitButton.textContent;
        
        // Show loading state
        submitButton.disabled = true;
        submitButton.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
        responseSection.style.display = 'none';
        responseContent.innerHTML = '<div class="loading">Loading...</div>';

        try {
            const formData = new FormData(form);
            const requestData = {
                question: formData.get('question'),
                identity: {
                    user_id: parseInt(savedUserId) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID
                }
            };

            const response = await fetch('/ask', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestData)
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.detail || 'Request failed');
            }

            displayResponse(data);
            responseSection.style.display = 'block';

        } catch (error) {
            responseContent.innerHTML = `
                <div class="error">
                    <strong>Error:</strong> ${error.message}
                </div>
            `;
            responseSection.style.display = 'block';
        } finally {
            submitButton.disabled = false;
            submitButton.textContent = originalText;
        }
    });
    
    

    function displayResponse(data) {
        let html = '';

        // User statistics
        if (data.user_info) {
            html += `
                <div class="user-stats">
                    <h4>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #${data.user_info.user_id}</h4>
                    <div class="stats-grid">
                        <div class="stat-item">
                            <div class="stat-value">${data.user_info.total_tasks}</div>
                            <div class="stat-label">–í—Å–µ–≥–æ –∑–∞–¥–∞—á</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value">${data.user_info.filtered_tasks}</div>
                            <div class="stat-label">–ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É</div>
                        </div>
                    </div>
                </div>
            `;
        }

        // Main response info
        html += `
            <div class="response-block">
                <h4>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ</h4>
                <div class="data-field">
                    <span class="field-name">SQL –∑–∞–ø—Ä–æ—Å:</span>
                    <span class="field-value">${escapeHtml(data.sql)}</span>
                </div>
                <div class="data-field">
                    <span class="field-name">–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</span>
                    <span class="field-value">${escapeHtml(data.explanation)}</span>
                </div>
                <div class="data-field">
                    <span class="field-name">–¢—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è:</span>
                    <span class="field-value">${data.needs_clarification ? '–î–∞' : '–ù–µ—Ç'}</span>
                </div>
                ${data.clarification_question ? `
                <div class="data-field">
                    <span class="field-name">–í–æ–ø—Ä–æ—Å –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è:</span>
                    <span class="field-value">${escapeHtml(data.clarification_question)}</span>
                </div>
                ` : ''}
            </div>
        `;

        // Data rows
        if (data.rows && data.rows.length > 0) {
            html += `
                <div class="response-block">
                    <h4>üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (${data.rows.length} –∑–∞–¥–∞—á)</h4>
            `;

            data.rows.forEach((row, index) => {
                html += `
                    <div class="data-block">
                        <h5>
                            üéØ –ó–∞–¥–∞—á–∞ #${row.id}
                            ${row.status ? `<span class="status-badge status-${row.status}">${getStatusText(row.status)}</span>` : ''}
                        </h5>
                `;

                Object.entries(row).forEach(([key, value]) => {
                    let displayValue = value;
                    let valueClass = 'field-value';
                    let fieldName = getFieldName(key);
                    
                    if (key === 'priority') {
                        valueClass += ` priority-${value}`;
                        displayValue = getPriorityText(value);
                    } else if (key === 'status') {
                        displayValue = getStatusText(value);
                    } else if (key === 'created_at') {
                        displayValue = formatDate(value);
                    }
                    
                    if (value === null || value === undefined) {
                        displayValue = '<em>–Ω–µ —É–∫–∞–∑–∞–Ω–æ</em>';
                    } else if (typeof value === 'object') {
                        displayValue = '<pre>' + escapeHtml(JSON.stringify(value, null, 2)) + '</pre>';
                    } else {
                        displayValue = escapeHtml(String(displayValue));
                    }

                    html += `
                        <div class="data-field">
                            <span class="field-name">${fieldName}:</span>
                            <span class="${valueClass}">${displayValue}</span>
                        </div>
                    `;
                });

                html += `</div>`;
            });

            html += `</div>`;
        } else {
            html += `
                <div class="response-block">
                    <h4>üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h4>
                    <p>–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>
                </div>
            `;
        }

        responseContent.innerHTML = html;
    }

    function getFieldName(key) {
        const fieldNames = {
            'id': 'ID',
            'title': '–ù–∞–∑–≤–∞–Ω–∏–µ',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
            'status': '–°—Ç–∞—Ç—É—Å',
            'priority': '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
            'created_at': '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
            'assigned_to': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
            'user_id': 'User ID'
        };
        return fieldNames[key] || key;
    }

    function getStatusText(status) {
        const statuses = {
            'pending': '–û–∂–∏–¥–∞–µ—Ç',
            'in_progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
        };
        return statuses[status] || status;
    }

    function getPriorityText(priority) {
        const priorities = {
            'low': '–ù–∏–∑–∫–∏–π',
            'medium': '–°—Ä–µ–¥–Ω–∏–π',
            'high': '–í—ã—Å–æ–∫–∏–π'
        };
        return priorities[priority] || priority;
    }

    function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleString('ru-RU');
    }

    function escapeHtml(unsafe) {
        if (unsafe === null || unsafe === undefined) return '';
        return unsafe
            .toString()
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Å—ã–ª–∫–∏ Health Check
    const healthLink = document.querySelector('a[href="/health"]');
    
    if (healthLink) {
        healthLink.addEventListener('click', async function(e) {
            e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
            
            try {
                const response = await fetch('/health');
                const data = await response.json();
                
                if (response.ok) {
                    showModal('‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã', `–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ<br><strong>–°—Ç–∞—Ç—É—Å:</strong> ${data.status}`);
                } else {
                    showModal('‚ùå –û—à–∏–±–∫–∞', `–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: ${data.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                }
            } catch (error) {
                showModal('‚ùå –û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: ${error.message}`);
            }
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
    function showModal(title, content) {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        let modal = document.getElementById('healthModal');
        
        if (!modal) {
            modal = document.createElement('div');
            modal.id = 'healthModal';
            modal.className = 'modal';
            modal.innerHTML = `
                <div class="modal-content">
                    <h3>${title}</h3>
                    <div class="modal-body">${content}</div>
                    <div class="modal-buttons">
                        <button class="btn btn-primary" id="healthModalOk">OK</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ OK
            document.getElementById('healthModalOk').addEventListener('click', function() {
                modal.style.display = 'none';
            });
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    modal.style.display = 'none';
                }
            });
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            modal.querySelector('h3').textContent = title;
            modal.querySelector('.modal-body').innerHTML = content;
        }
        
        modal.style.display = 'block';
    }
    

    // Initialize the UI
    updateUI();
    
});